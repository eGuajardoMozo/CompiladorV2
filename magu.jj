/*
	MAGU Scanner/Parser
	Adrián Martínez A01280252
	Estefanía Guajardo A00813202
*/

// Para permitir el uso de variables y que los métodos no sean estáticos por default
options {
	STATIC = false ;
}

PARSER_BEGIN(magu)

import java.lang.String;
import java.util.*;
import java.io.FileNotFoundException;
import javax.swing.*; 
import java.io.*;

class magu
{

	public static void main(String[] args) throws ParseException
	{
		try
		{
			magu scanner = new magu(System.in);
			scanner.Programa();
			System.out.println("OK!");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Error!");
		}
	}

	Stack pOperators = new Stack();
	Stack pOperands = new Stack();
	Stack pJumps = new Stack();

	Vector cuadruplos = new Vector(1);

	int currentTemporal  = 1;
	int currentString = 1;
	int quadCounter = 0;
}
PARSER_END(magu)

TOKEN:
{
		< TK_FORWARD : "forward" | "f" >		{}
	|	< TK_LEFT : "left" | "l" >				{}
	|	< TK_RIGHT : "right" | "r">				{}
	|	< TK_PENCILUP : "pencilup" | "pu" >		{}
	|	< TK_PENCILDOWN : "pencildown" | "pd" >	{}
	|	< TK_MOVE : "move" | "m" >				{}
	|	< TK_HOME : "home" | "h" >				{}
	|	< TK_CURVE : "curve" | "cv" >			{}
	|	< TK_INPUT : "input" | "in" >			{}
	|	< TK_PRINT : "print" | "pr" >			{}
	|	< TK_WHILE : "while" >					{}
	|	< TK_IF : "if" >						{}
	|	< TK_ELSE : "else" >					{}
	|	< TK_ARR : "arr" >						{}
	|	< TK_FUNC : "func" >					{}
	|	< TK_MAIN : "main" >					{}
	|	< TK_NE: "<>" >							{}
	|	< TK_EQT: "==" >						{}
	|	< TK_LT: "<" >							{}
	|	< TK_GT: ">" >							{}
	|	< TK_EQ: "=" >							{}
	|	< TK_LPAR: "(" >						{}
	|	< TK_RPAR: ")" >						{}
	|	< TK_LBRACKET: "[" >					{}
	|	< TK_RBRACKET: "]" >					{}
	|	< TK_LBRACE: "{" >						{}
	|	< TK_RBRACE: "}" >						{}
	|	< TK_COMMA: "," >						{}
	|	< TK_PLUS: "+" >						{}
	|	< TK_MINUS: "-" >						{}
	|	< TK_MULT: "*" >						{}
	|	< TK_DIV: "/" >							{}	
	|	< TK_CTE_I : (["0"-"9"])+ >				{}
	|	< TK_ID :  ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])* > {}
	|   < TK_STRING : <QUOTE> (~["\r","\n","\"" ])+ <QUOTE> > {}
	|	< #QUOTE : "\"" >
}

SKIP:
{
	" "	| "\r\n" | "\t"
}

void Programa() : {}
{   
    ( Asignacion() )*
    ( Arreglo() )*

    {
    	// Crear cuadruplo
		Cuadruplo mainQuad = new Cuadruplo("main", "_", "_", "_");
		quadCounter++;
		cuadruplos.addElement(mainQuad);

		pJumps.push("" + (quadCounter-1));	
	}

    ( Definicion_Func() )*
    
    <TK_MAIN> <TK_LPAR> <TK_RPAR>

	{
		String main = (String) pJumps.pop();
		Fill ( Integer.parseInt(main) , quadCounter);
	}

    Secuencia()  <EOF>

    {
    	// Crear cuadruplo
    	Cuadruplo quad = new Cuadruplo("end","_","_","_"); // Fin del codigo
    	cuadruplos.addElement(quad);
    	GuardarCuadruplos(); // Guardarlos en archivo
    }
}

void Func() : {String op1, op2, s, s2, index; Token id; String userString = "";}
{
    ( 
    	  <TK_FORWARD> <TK_LPAR> Exp() <TK_RPAR> 
    	  	{
    	  		op1 = (String)pOperands.pop();

    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("f",op1,"_","_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
    	| <TK_LEFT> <TK_LPAR> Exp() <TK_RPAR>
    	  	{
    	  		op1 = (String)pOperands.pop();

    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("l",op1,"_","_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
    	| <TK_RIGHT> <TK_LPAR>  Exp() <TK_RPAR>
    	  	{
    	  		op1 = (String)pOperands.pop();

    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("r",op1,"_","_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
    	| <TK_INPUT> <TK_LPAR> id = <TK_ID> <TK_RPAR>
    	  	{
    	  		op1 = id.image;

    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("in",op1,"_","_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
	    	
    	| <TK_PRINT> <TK_LPAR> 
    			( 
    				LOOKAHEAD(2)
    				id = <TK_ID> <TK_LBRACKET> Exp() <TK_RBRACKET>
    				{
    					index = (String)pOperands.pop();
    					s =  id.image + "-" + index;
    					userString = userString + s + ";";
    				}
    			|
    				id = <TK_ID>
    				{
    					s = id.image;
    					userString = userString + s + ";";
    				}			
    			|
    				id = <TK_STRING>
    				{
    					s = id.image;
    					userString = userString + s + ";";
    				} 
    			)

    			( <TK_PLUS> 
    				( 
    					LOOKAHEAD(2)
    			  		id = <TK_ID> <TK_LBRACKET> Exp() <TK_RBRACKET> 
    			  		{ 
    			  			index = (String)pOperands.pop();
    			  			s = id.image + "-" + index;
    			  			userString = userString + s + ";";
    			  		}
    			  	|
    					id = <TK_ID>
    					{
    						s = id.image;
    						userString = userString + s + ";"; 
    					}
    				|
    					id = <TK_STRING>
    					{
    						s = id.image;
    						userString = userString + s + ";";
    					}  
    				) 
    			)*
    			<TK_RPAR>

    			{
    				// Crear cuadruplo
    				Cuadruplo quad = new Cuadruplo("pr", userString ,"_","_");
    				currentString++;
    	  			quadCounter++;
    	  			cuadruplos.addElement(quad);
    			}

    	| <TK_PENCILUP> <TK_LPAR> <TK_RPAR>
    	  	{
    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("pu","_","_","_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
    	| <TK_PENCILDOWN> <TK_LPAR> <TK_RPAR>
    	  	{
    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("pd","_","_","_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
    	| <TK_MOVE> <TK_LPAR> Exp() <TK_COMMA> Exp() <TK_RPAR>
    	  	{
    	  		op2 = (String)pOperands.pop();
    	  		op1 = (String)pOperands.pop();

    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("m",op1,op2,"_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
    	| <TK_CURVE> <TK_LPAR> Exp() <TK_COMMA> Exp() <TK_RPAR>
    	  	{
    	  		op2 = (String)pOperands.pop();
    	  		op1 = (String)pOperands.pop();

    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("cv",op1,op2,"_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
    	| <TK_HOME> <TK_LPAR> <TK_RPAR>
    	  	{
    	  		// Crear cuadruplo
    	  		Cuadruplo quad = new Cuadruplo("h","_","_","_");
    	  		quadCounter++;
    	  		cuadruplos.addElement(quad);
	    	}
    )   
}  




void Funcion() : {Token id; int paramCounter = 0, start; String argument;} 
{	
    id = <TK_ID>

    {
    	// Si no existe una función con este id, marcar error y salir
    	if ( !Memoria.contextos.containsKey(id.image) ) {
    		System.out.println("ERROR: La funcion " + id.image + " no existe");
			System.exit(0);
    	}
    } 


    <TK_LPAR> 
    {
    	// Crear cuadruplo que marca la llamada a una función
    	Cuadruplo func = new Cuadruplo("func",id.image,"_","_");
    	quadCounter++;
    	cuadruplos.addElement(func);
    }

    // ARGUMENTS
    ( 
    	Exp()
    	{
    		paramCounter++;
    		argument = (String)pOperands.pop();

    		// Crear cuadruplo
    		Cuadruplo quad = new Cuadruplo("param",argument,"_","param" + paramCounter);
    		quadCounter++;
    		cuadruplos.addElement(quad);
    	}

    	( <TK_COMMA> {paramCounter++;}
    		Exp() 
    		{
	    		argument = (String)pOperands.pop();

	    		// Crear cuadruplo
	    		Cuadruplo quad2 = new Cuadruplo("param",argument,"_","param" + paramCounter);
	    		quadCounter++;
	    		cuadruplos.addElement(quad2);
    		}
    	)* 
    )? 

    <TK_RPAR>
    {
    	// Generar gosub con el nombre de la función y el cuadruplo donde empieza
    	start = Memoria.getFuncStart(id.image);

    	// Crear cuadruplo
    	Cuadruplo gosub = new Cuadruplo("gosub",id.image,"_", "" + start );
	    quadCounter++;
	    cuadruplos.addElement(gosub);
    }
}


void Exp() : {}
{
	Termino()

	( 
		<TK_PLUS> 
		{
			pOperators.push("+"); // meter el + a la stack de operadores
		}

		Termino()
		PendingOperator("+","-")

		| 

		<TK_MINUS> 
		{
			pOperators.push("-"); // meter el - a la stack de operadores
		}

		Termino()
		PendingOperator("+","-")

	)*
		
}

void Termino() : {}
{
	Factor()
	
	( 
		<TK_MULT> 
		{
			pOperators.push("*"); // meter el * a la stack de operadores
		}

		Factor()
		PendingOperator("*","/")

		| 

		<TK_DIV>
		{
			pOperators.push("/"); // meter el / a la stack de operadores
		}

		Factor()
		PendingOperator("*","/")

	)*

}

void Factor() : {Token o; String index;}
{
	LOOKAHEAD(2)

	//indice de arreglo
	o = <TK_ID> <TK_LBRACKET> Exp() <TK_RBRACKET>
	{
		index = (String)pOperands.pop();
		pOperands.push(o.image + "-" + index );
	}

	|

	// variable
	o = <TK_ID>
	{
		pOperands.push(o.image); // meter el id a la stack de operandos
	}

	|

	//constante
	o = <TK_CTE_I>
	{
		pOperands.push(o.image); // meter la constante a la stack de operandos
	}
	
}


void Asignacion() : {String op1, op2; Token r;}
{
	LOOKAHEAD(2) 
	// variable
	r = <TK_ID> <TK_EQ> Exp()
	{
		op1 = (String)pOperands.pop();

		// Crear cuadruplo
		Cuadruplo quad = new Cuadruplo("=", op1, "_", r.image);
		quadCounter++;
		cuadruplos.addElement(quad);

	}
	|
	// indice de arreglo
	r = <TK_ID> <TK_LBRACKET> Exp() <TK_RBRACKET> <TK_EQ> Exp()
	{
		op1 = (String)pOperands.pop(); // Valor que se va a asignar
		op2 = (String)pOperands.pop(); // Indice del arreglo

		// Crear cuadruplo
		Cuadruplo quad = new Cuadruplo("=", op1, op2, r.image);
		quadCounter++;
		cuadruplos.addElement(quad);

	}
}


void Bool() : {Token o;}
{
	Exp()
	( 
		o = <TK_LT> Exp()
		{
			pOperators.push(o.image); // meter el < a la stack de operandos
		}
		PendingOperatorBool()

		|
		
		o = <TK_GT>	Exp()
		{
			pOperators.push(o.image); // meter el > a la stack de operandos
		}
		PendingOperatorBool()


		|
		
		o = <TK_NE> Exp()
		{
			pOperators.push(o.image); // meter el <> a la stack de operandos
		}
		PendingOperatorBool()


		|
		
		o = <TK_EQT> Exp()
		{
			pOperators.push(o.image); // meter el == a la stack de operandos
		}
		PendingOperatorBool()

	)?
}

void Secuencia() : {}
{
	<TK_LBRACE> ( LOOKAHEAD(2) Funcion() | LOOKAHEAD(2) Func() | While() | Asignacion() | Condicion() )
	( <TK_COMMA> ( LOOKAHEAD(2) Funcion() | LOOKAHEAD(2) Func() | While() | Asignacion() | Condicion() ) )*
	<TK_RBRACE>
}

void While() : {String op1, r;}
{
	<TK_WHILE>
	{
		pJumps.push("" + (quadCounter+1));
	}


	<TK_LPAR> Bool() <TK_RPAR>
	{
		op1 = (String)pOperands.pop();

		// Crear cuadruplo
		Cuadruplo quadTrue = new Cuadruplo("GotoF", op1, "_", "_");
		quadCounter++;
		cuadruplos.addElement(quadTrue);
		pJumps.push("" + (quadCounter-1));
	}

	Secuencia()
	{
		String end = (String)pJumps.pop();
		String retorno = (String)pJumps.pop();

		// Crear cuadruplo
		Cuadruplo quadFalse = new Cuadruplo("Goto", "_", "_", retorno);
		quadCounter++;
		cuadruplos.addElement(quadFalse);

		Fill ( Integer.parseInt(end), quadCounter);
	}
}







void Definicion_Func() : {Token id, var; int numParam = 0;}
{
	<TK_FUNC> id = <TK_ID>
	{
		Memoria.addFunc(id.image); // Se agrega la función a memoria

		// Crear cuadruplo
		Cuadruplo quadFunc = new Cuadruplo("defFunc", id.image, "_", "_");
		quadCounter++;
		cuadruplos.addElement(quadFunc);
	}

	<TK_LPAR>
	( 
		// Crea variable param1, param2... cuyo valor es el nombre dado por el usuario
		var = <TK_ID>
		{
			// Crear cuadruplo
			numParam++;
			Cuadruplo quadParam = new Cuadruplo("defParam", id.image, "param" + numParam, var.image);
			quadCounter++;
			cuadruplos.addElement(quadParam);
		}

		( 
			<TK_COMMA> 
			var = <TK_ID>
			{
				// Crear cuadruplo
				numParam++;
				Cuadruplo quadParam2 = new Cuadruplo("defParam", id.image, "param" + numParam, var.image);
				quadCounter++;
				cuadruplos.addElement(quadParam2);
			}			
		)* 

	)?
	<TK_RPAR>

	// Se agrega el punto de inicio de la función 
	{
		Memoria.setFuncStart(id.image, quadCounter+1);
	}

	Secuencia()
	{
		// Crear cuadruplo
		Cuadruplo quad = new Cuadruplo("endproc", "_", "_", "_");
		quadCounter++;
		cuadruplos.addElement(quad);
	}

}



void Condicion() : {String op1, r;}
{
	<TK_IF> <TK_LPAR> Bool() <TK_RPAR>

	{
		op1 = (String)pOperands.pop();

		// Crear cuadruplo
		Cuadruplo quadTrue = new Cuadruplo("GotoF", op1, "_", "_");
		quadCounter++;
		cuadruplos.addElement(quadTrue);
		pJumps.push("" + (quadCounter-1));
	}
	Secuencia()

	(<TK_ELSE> 
	{
		// Crear cuadruplo
		Cuadruplo quadFalse = new Cuadruplo("Goto", "_", "_", "_");
		quadCounter++;
		cuadruplos.addElement(quadFalse);

		String falso = (String)pJumps.pop();
		pJumps.push("" + (quadCounter-1));
		Fill ( Integer.parseInt(falso), quadCounter);

	}
		Secuencia() )?

	// Fin del if-else
	{
		String end = (String)pJumps.pop();

		Fill ( Integer.parseInt(end), quadCounter);
	}
}

void Arreglo() : {Token id; String op1, op2; int index = 0;}
{
	<TK_ARR> id = <TK_ID> <TK_LBRACKET> Exp() <TK_RBRACKET>

    	{
    		op1 = id.image;
	  		op2 = (String)pOperands.pop();

	  		// Crear cuadruplo
	  		Cuadruplo declaracion = new Cuadruplo("arr",op1,op2,"_");
	  		quadCounter++;
	  		cuadruplos.addElement(declaracion);
	  		
    	}
	


	(
		<TK_EQ> <TK_LPAR> Exp() 

		{
			op1 = (String)pOperands.pop(); // Valor que se va a asignar
			op2 = "" + index; // Indice del arreglo

			// Crear cuadruplo
			Cuadruplo asignacion = new Cuadruplo("=", op1, op2, id.image);
			quadCounter++;
			index++;
			cuadruplos.addElement(asignacion);

		}

		(<TK_COMMA> Exp() 
		{

			op1 = (String)pOperands.pop(); // Valor que se va a asignar
			op2 = "" + index; // Indice del arreglo

			// Crear cuadruplo
			Cuadruplo asignacion2 = new Cuadruplo("=", op1, op2, id.image);
			quadCounter++;
			index++;
			cuadruplos.addElement(asignacion2);
		}

		)*

		<TK_RPAR>

	)?
}






// --------- FUNCIONES AUXILIARES -------------  //


// Punto 4 y 5, si hay operadores pendientes...
void PendingOperator(String operator1, String operator2) : {String o, op1,  op2, r;}
{
	{
		// Si la pila no esta vacía
		if( !pOperators.empty()) {

			// Y el tope de la pila es alguno de los operadores mandados. +- o */
			if ( pOperators.peek() == operator1 || pOperators.peek() == operator2  ) {

				// Sacar los operandos y el operador de las pilas
				op2 = (String)pOperands.pop();
				op1 = (String)pOperands.pop();
				o = (String)pOperators.pop();
				r = "t" + currentTemporal;

				currentTemporal++;

				// Crear un cuadruplo y meterlos
				Cuadruplo quad = new Cuadruplo(o, op1, op2, r);
				quadCounter++;
		    	pOperands.push(r);
		    	cuadruplos.addElement(quad);
		    }
		}
	}
}

// Punto 9, si hay operadores booleanos pendientes...
void PendingOperatorBool() : {String o, op1,  op2, r;}
{
	{
		// Si la pila no esta vacía
		if( !pOperators.empty()) {

			// Y el tope de la pila es > < <> o ==
			if ( pOperators.peek() == ">" || pOperators.peek() == "<" || 
				pOperators.peek() == "<>" || pOperators.peek() == "=="  ) {

				// Sacar los operandos y el operador de las pilas
				op2 = (String)pOperands.pop();
				op1 = (String)pOperands.pop();
				o = (String)pOperators.pop();
				r = "t" + currentTemporal;

				currentTemporal++;

				// Crear un cuadruplo y meterlos
				Cuadruplo quad = new Cuadruplo(o, op1, op2, r);
				quadCounter++;
		    	pOperands.push(r);
		    	cuadruplos.addElement(quad);
		    }
		}
	}
}

// Hace print a los cuadruplos
void GuardarCuadruplos() : {}
{
	{
		try {
				// Crea un cuadro de dialogo. El input se guarda en strNomArchivo
				String strNomArchivo = "";

				// Si el campo quedo vacío o se cerró la ventana, volver a mostrarlo
				while (strNomArchivo==null || strNomArchivo.trim().isEmpty()) {
					strNomArchivo = (String)JOptionPane.showInputDialog(
			                null, "Escribe el nombre que tendra el archivo", "Input", JOptionPane.PLAIN_MESSAGE, null, null, null);
				}

				// objeto printwriter con el nombre del archivo
                PrintWriter codigoObj = new PrintWriter(strNomArchivo);

                // Agrega uno por uno los cuadruplos al archivo
                for (int i=0; i < cuadruplos.size(); i++) {
					codigoObj.println( Cuadruplo.returnCuadruplo( (Cuadruplo)cuadruplos.get(i) ) );
				}

				// cierra el archivo
				codigoObj.close();

            } catch(FileNotFoundException e) { 
                System.out.println(e.getMessage());
        }
	}
}

// Llena el campo de jump de un cuadruplo
void Fill(int numQuad, int jump) : {}
{
	{
		Cuadruplo quad = (Cuadruplo)cuadruplos.get(numQuad);
		quad.resultado = "" + (jump+1);
	}
}